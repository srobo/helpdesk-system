# Generated by Django 3.2.18 on 2023-03-24 16:41
from __future__ import annotations

from typing import TYPE_CHECKING

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

if TYPE_CHECKING:
    from django.db.backends.base.schema import BaseDatabaseSchemaEditor
    from django.db.migrations.state import StateApps


def create_events(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Ticket = apps.get_model("tickets", "Ticket")  # noqa: N806
    TicketComment = apps.get_model("tickets", "TicketComment")  # noqa: N806
    TicketEvent = apps.get_model("tickets", "TicketEvent")  # noqa: N806
    TicketResolution = apps.get_model("tickets", "TicketResolution")  # noqa: N806

    for ticket in Ticket.objects.all():
        TicketEvent.objects.create(
            ticket=ticket,
            new_status="OP",
            comment=ticket.description,
            user=ticket.opened_by,
            created_at=ticket.created_at,
        )

    for comment in TicketComment.objects.all():
        TicketEvent.objects.create(
            ticket=comment.ticket,
            user=comment.author,
            comment=comment.content,
            created_at=comment.created_at,
        )

    for resolution in TicketResolution.objects.all():
        TicketEvent.objects.create(
            ticket=resolution.ticket,
            new_status="RS",
            user=resolution.user,
            comment=resolution.comment,
            created_at=resolution.resolved_at,
        )


def create_old_objects(
    apps: StateApps,
    schema_editor: BaseDatabaseSchemaEditor,
) -> None:
    Ticket = apps.get_model("tickets", "Ticket")  # noqa: N806
    TicketComment = apps.get_model("tickets", "TicketComment")  # noqa: N806
    TicketEvent = apps.get_model("tickets", "TicketEvent")  # noqa: N806
    TicketResolution = apps.get_model("tickets", "TicketResolution")  # noqa: N806

    # Populate the descriptions
    for ticket in Ticket.objects.all():
        try:
            first_open_event = ticket.events.filter(new_status="OP").order_by("created_at").first()
        except TicketEvent.DoesNotExist:
            pass
        else:
            if first_open_event:
                ticket.opened_by = first_open_event.user
                ticket.description = first_open_event.comment
                ticket.save()

    # Don't bother with open events, there is no equivalent.
    for event in TicketEvent.objects.exclude(new_status="OP"):
        if event.new_status == "RS":
            TicketResolution.objects.get_or_create(
                ticket=event.ticket,
                defaults={
                    "comment": event.comment,
                    "user": event.user,
                    "resolved_at": event.created_at,
                },
            )
        else:
            TicketComment.objects.get_or_create(
                ticket=event.ticket,
                content=event.comment,
                author=event.user,
                created_at=event.created_at,
            )


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("tickets", "0004_add_missing_unique_constraint"),
    ]

    operations = [
        migrations.CreateModel(
            name="TicketEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "new_status",
                    models.CharField(
                        blank=True,
                        choices=[("OP", "Open"), ("RS", "Resolved")],
                        help_text="If the event changes the state of the ticket, enter it here.",
                        max_length=2,
                        verbose_name="Updated status",
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("created_at", models.DateTimeField()),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        related_query_name="events",
                        to="tickets.ticket",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="ticketevent",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("new_status__exact", ""), _negated=True),
                        models.Q(("comment__exact", ""), _negated=True),
                        _connector="OR",
                    ),
                ),
                name="at_least_event_or_comment_set",
            ),
        ),
        migrations.RunPython(create_events, create_old_objects),
        migrations.AlterField(
            model_name="ticketevent",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.RemoveField(
            model_name="ticketresolution",
            name="ticket",
        ),
        migrations.RemoveField(
            model_name="ticketresolution",
            name="user",
        ),
        migrations.RemoveField(
            model_name="ticketcomment",
            name="author",
        ),
        migrations.RemoveField(
            model_name="ticketcomment",
            name="ticket",
        ),
        migrations.DeleteModel(
            name="TicketResolution",
        ),
        migrations.DeleteModel(
            name="TicketComment",
        ),
        migrations.RemoveField(
            model_name="ticket",
            name="description",
        ),
        migrations.RemoveField(
            model_name="ticket",
            name="opened_by",
        ),
    ]
